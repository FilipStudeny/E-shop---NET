@page "/profile"
@inject IAuthenticationService AuthenticationService
@attribute [Authorize]

<h2 class="text-center">Profile</h2>

<AuthorizeView>
    <h2>Logged with an email address: <i>@context.User.Identity?.Name</i></h2>
    <hr/>
</AuthorizeView>

<h3>Change password</h3>
<EditForm Model="_userPasswordChange" OnValidSubmit="ChangePassword">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <div>
            <label for="password">Password</label>
            <InputText class="form-control" id="password" @bind-Value="_userPasswordChange.Password" type="password"/>
            <ValidationMessage For="@(() => _userPasswordChange.Password)"/>
            </div>
        <div>
            <label for="password_confirm">Confirm password</label>
            <InputText class="form-control" id="password_confirm" @bind-Value="_userPasswordChange.ConfirmPassword" type="password"/>
            <ValidationMessage For="@(() => _userPasswordChange.ConfirmPassword)"/>
        </div>
     </div>
    <button type="submit" class="btn btn-primary">Register</button>
    <div class="@_messageCss">
        <p>@_message</p>
    </div>
</EditForm>



@code {
    readonly UserPasswordChange _userPasswordChange = new();
    string _message = string.Empty;
    string _messageCss = string.Empty;

    private async Task ChangePassword()
    {
        var response = await AuthenticationService.ChangePassword(_userPasswordChange);
        _message = response.Message;
        if (!response.Success)
        {
            _messageCss = "text-danger";
        }
        else
        {
            _messageCss = "text-success";
        }
    }
    

}