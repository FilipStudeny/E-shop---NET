@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<PageTitle>E-Shop | Shopping cart</PageTitle>

<h3>Shopping Cart</h3>

@if (cartProducts.Count == 0)
{
    <span>@message</span>
}else if (_orderCreated)
{
    <div class="text-center">
        <h2 class="text-center">Thank you for your order.</h2>
        <p>You can view your order <a class="text-capitalize" href="/orders">here</a></p>
    </div>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.Image" alt="@product.ProductTitle" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.ProductTitle</a></h5>
                    <span>@product.ProductType</span><br />
                    <input type="number" value="@product.Quantity"
                           @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                           class="form-control input-quantity"
                           min="1" />
                    <button class="btn-delete" 
                            @onclick="@(() => RemoveItemFromCart(product.ProductId, product.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(product => @product.Price * product.Quantity)
        </div>
    </div>
    <div class="mt-2">
        <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Place order</button>
    </div>
}

@code {
    List<CartDto> cartProducts = new();
    string message = "Loading products in cart ...";
    bool _orderCreated = false;

    protected override async Task OnInitializedAsync()
    {
        _orderCreated = false;
        await LoadCartItems();
    }

    private async Task LoadCartItems()
    {
        await CartService.GetCartItemCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task RemoveItemFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveItemFromCart(productId, productTypeId);
        await LoadCartItems();
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartDto item)
    {
        item.Quantity = int.Parse(e.Value.ToString());
        if (item.Quantity < 1)
            item.Quantity = 1;

        await CartService.UpdateQuantityForProduct(item);

    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemCount();
        _orderCreated = true;
    }

}