@page "/admin/product-types"
@using Eshop.Shared.Models.ProductModels
@inject IProductTypeService ProductTypeService
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<div class="section-header">
    <h2 class="text-center">Product types</h2>
</div>


<div class="row">
    <div class="col">Name</div>
    <div class="col">Url</div>
</div>

@foreach (var productType in ProductTypeService.ProductTypes)
{
    @if (productType.Editing)
    {
        <EditForm Model="_editingProductType" OnSubmit="UpdateProductType">
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="_editingProductType.Name" class="form-control"/>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                    <button class="btn btn-primary" @onclick="CancelEditing">
                        <i class="oi oi-circle-x"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <div class="col">@productType.Name</div>
            
            <div class="col">
                <button type="submit" class="btn btn-primary" @onclick="(() => EditProductType(productType))">
                    <i class="oi oi-pencil"></i>
                </button>
            </div>
        </div>
    }
    
}
<button class="btn btn-primary" @onclick="CreateNew">
    <i class="oi oi-plus"></i>Add new product type
</button>

@code {
    ProductType? _editingProductType = null;

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        ProductTypeService.OnChange += StateHasChanged;

    }

    private void EditProductType(ProductType type)
    {
        type.Editing = true;
        _editingProductType = type;
    }

    private void CreateNew()
    {
        _editingProductType = ProductTypeService.CreateNewProductType();

    }

    private async Task CancelEditing()
    {
        _editingProductType = new ProductType();
        await ProductTypeService.GetProductTypes();
    }
    
    private async Task UpdateProductType()
    {
        if (_editingProductType is { IsNew: true })
        {
            await ProductTypeService.AddProductType(_editingProductType);
        }
        else
        {
            await ProductTypeService.UpdateProductType(_editingProductType);
        }

        _editingProductType = new ProductType();
    }

    public void Dispose()
    {
        ProductTypeService.OnChange -= StateHasChanged;
    }

}