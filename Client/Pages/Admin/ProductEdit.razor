@page "/admin/product"
@page "/admin/product/{Id:int}"

@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]
@inject IJSRuntime JSruntime

<div class="section-header">
    <h2 class="text-center">Product</h2>
</div>

@if (_loading)
{
    <h2>@_message</h2>
}
else
{
    @if (_product.Editing)
    {
        <h2>Edit @_product.Title</h2>
    }else if (_product.IsNew)
    {
        <h2>Create new product</h2>
    }
    
    <EditForm Model="_product" OnValidSubmit="SubmitProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="_product.Title" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="_product.Image" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <img src="@_product.Image" />
        </div>
        <div class="mb-0">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="_product.Description" class="form-control"></InputTextArea>
        </div>
        <hr />
        <div class="header">
            <div class="col">Product Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in _product.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
                        @foreach (var productType in ProductTypeService.ProductTypes)
                        {
                    <option value="@productType.Id.ToString()">@productType.Name</option>
                        }
            </InputSelect>
        </div>
        <div class="col">
            <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
        </div>
        <div class="col">
            <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
        </div>
        <div class="col col-visible">
            <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5,1.5);" disabled="@variant.Deleted"></InputCheckbox>
        </div>
        <div class="col">
            <button type="button" class="btn btn-primary" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                <i class="oi oi-trash"></i>
            </button>
        </div>
    </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Add Variant
        </button>
        <hr />
        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="_product.CategoryId" class="form-control">
                @foreach (var category in CategoryService.AdminCategories)
                {
                <option value="@category.Id">@category.Name</option>
                }
        </InputSelect>
    </div>
    <hr />
    <div class="form-check">
        <InputCheckbox id="featured" @bind-Value="_product.FeaturedProduct" class="form-check-input"></InputCheckbox>
        <label for="featured" class="form-check-label">Featured</label>
    </div>
    <div class="form-check">
        <InputCheckbox id="visible" @bind-Value="_product.Visible" class="form-check-input"></InputCheckbox>
        <label for="visible" class="form-check-label">Visible</label>
    </div>
    <hr />
    <button type="submit" class="btn btn-primary float-end">@_btnText</button>
    <ValidationSummary></ValidationSummary>
    </EditForm>
    
    @if (!_product.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">
            <i class="oi oi-trash"></i>Delete product
        </button>
    }
    
    
}



@code {

    [Parameter] public int Id { get; set; }
    Product _product = new Product();
    bool _loading = true;
    string _message = "Loading...";
    string _btnText = "";
    
    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            _product = new Product { IsNew = true };
            _btnText = "Create product";
        }
        else
        {
            var dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct == null)
            {
                _message = $"Product with ID {Id} not found.";
                return;
            }

            _product = dbProduct;
            _product.Editing = true;
            _btnText = "Update product";
        }

        _loading = false;
    }

    private void RemoveVariant(int productTypeId)
    {
        var variant = _product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }

        if (variant.IsNew)
        {
            _product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    private void AddVariant()
    {
        _product.Variants.Add(new ProductVariant { IsNew = true, ProductId = _product.Id});
    }
    
    async void SubmitProduct()
    {
        if (_product.IsNew)
        {
            var result = await ProductService.CreateProduct(_product);
            NavigationManager.NavigateTo($"/admin/product/{result.Id}");
        }
        else
        {
            _product.IsNew = false;
            _product = await ProductService.UpdateProduct(_product);
            NavigationManager.NavigateTo($"/admin/product/{_product.Id}", true);

        }
    }

    async void DeleteProduct()
    {
        var confirm = await JSruntime.InvokeAsync<bool>("confirm", $"Do you want to delete this product ?");
        if (!confirm) return;
        await ProductService.DeleteProduct(_product);
        NavigationManager.NavigateTo("/admin/products");
    }
    
}