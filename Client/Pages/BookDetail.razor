@page "/books/book/{id:int}"
@inject IBookService BookService
@inject ICartService CartService

@if (showAlert)
{
	<MudAlert Severity="Severity.Error" Variant="Variant.Filled" Square="true" Class="my-2">@Message</MudAlert>
	<MudText Typo="Typo.h4" Class="mt-5 text-center">
		Go back to <MudLink Typo="Typo.h4" Href="/">front page</MudLink>
	</MudText>
}else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4 mb-5">
        <MudPaper Elevation="3" Class="p-4 p-md-4">
            <MudText Typo="Typo.h4">@book?.Title</MudText>
            <MudDivider DividerType="DividerType.FullWidth" Class="my-2" Style="border-color: #212121; border-width: 2px;" />
            <MudContainer MaxWidth="MaxWidth.Large">
                <MudContainer Class="d-flex flex-column flex-md-row align-items-center align-items-md-center">

                    <MudCarousel SelectedIndex="0" AutoCycle="false" Class="mud-width-full" Style="height: 350px;" ItemsSource="@book?.Images">
                        <ItemTemplate >
                            <MudElement Class="d-flex justify-content-center mt-3">
                                    <MudImage ObjectFit="ObjectFit.Contain" Width="300" Height="300" Src="@context.Data" />
                            </MudElement>
                        </ItemTemplate>
                    </MudCarousel>
                    
                    <MudContainer MaxWidth="MaxWidth.Medium">
                        <MudStack Spacing="2">
                            <MudText Typo="Typo.h2">@book?.Title</MudText>
                            <MudLink Href="@($"/authors/author/{book?.Author?.Name}")">@book?.Author?.Name</MudLink>
                            <MudStack Spacing="1" Class="d-flex flex-column flex-md-row justify-content-between">
                                <MudText Typo="Typo.h6">Part of series: <MudLink Href="@($"/series/{book?.Series?.Url}")">@book?.Series?.Name</MudLink></MudText>
                                <MudText Typo="Typo.h6">Book number: @book?.SeriesOrder</MudText>
                            </MudStack>
                        </MudStack>
                        <MudDivider DividerType="DividerType.FullWidth" Class="my-2" Style="border-color: #212121;" />
                        <MudText Typo="Typo.body1" Class="mb-2">@book?.ShortDescription</MudText>

                        @if(book?.Variants?.Count > 0)
                        {
                            <MudStack Spacing="2" Class="d-flex flex-column flex-md-row">
                                <MudSelect T="string" Variant="Variant.Outlined" @bind-Value="CurrentVariant" Class="mb-2 mb-md-0">
                                    @foreach (var variant in book?.Variants!)
                                    {
                                        <MudSelectItem Value="@(variant?.BookType?.Name)" />
                                    }
                                </MudSelect>
                                @if (GetSelectedVariant() != null)
                                {
                                    <MudText Align="Align.Center" Typo="Typo.h2" Color="Color.Success">$@GetSelectedVariant()?.Price</MudText>
                                }

                            </MudStack>
                        }


                        @if (!bookInCart)
                        {
                            <MudButton FullWidth="true" OnClick="AddItemToCart" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ShoppingCart">Add to cart</MudButton>
                        }
                        else
                        {
                            <MudButton FullWidth="true" OnClick="RemoveFromCart" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ShoppingCart">Remove from cart</MudButton>

                        }

                   

                        
                    </MudContainer>
                </MudContainer>
            </MudContainer>

            <MudContainer MaxWidth="MaxWidth.Large">
                <MudText Class="mb-4 mt-4">@book?.Description</MudText>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-2" Style="border-color: #212121;" />
                <MudContainer MaxWidth="MaxWidth.Small" Class="mt-2">
                    <MudStack Spacing="1" Row="true" Justify="Justify.SpaceBetween" Class="flex-wrap">
                        <MudText>Number of pages: @book?.PageCount</MudText>
                        <MudText>ISBN @book?.Isbn</MudText>
                    </MudStack>
                        <MudStack Spacing="1" Row="true" Justify="Justify.SpaceBetween" Class="flex-wrap">
                        <MudText>Release date: @book?.ReleaseDate.ToString("dd/MM/yyyy")</MudText>
                        <MudText>Copies in store: @book?.CopiesInStore</MudText>
                     </MudStack>
                </MudContainer>
             </MudContainer>
        </MudPaper>
    </MudContainer>
}

@code {
    [Parameter] public int Id { get; set; }

    private Book? book = new();
    private bool showAlert = false;
    private string Message = string.Empty;

    private string CurrentVariant = string.Empty;
    private bool bookInCart = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await BookService.GetBook(Id);
        if (!response.Success)
        {
            showAlert = true;
            Message = response.Message;
        }
        else
        {
            book = response.Data;
            if(book?.Variants?.Count > 0)
            {
                CurrentVariant = book?.Variants[0]!.BookType.Name!;
            }
        }

        bookInCart = await IsItemInCart(book.Id);
    }

    public async Task<bool> IsItemInCart(int itemId)
    {
        var cartProducts = await CartService.GetCartProducts();

        foreach (var item in cartProducts)
        {
            if (item.BookId == itemId)
            {
                return true; 
            }
        }

        return false;
    }

    private BookVariant? GetSelectedVariant()
    {
        var variant = book?.Variants?.FirstOrDefault(variant => variant.BookType?.Name == CurrentVariant);
        return variant;
    }


    private async Task AddItemToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
            {
                BookId = productVariant.BookId,
                BookTypeId = productVariant.BookTypeId
            };

        await CartService.AddToCart(cartItem);
        bookInCart = true;
    }

    private async Task RemoveFromCart()
    {
        var productVariant = GetSelectedVariant();
        await CartService.RemoveItemFromCart(book.Id, productVariant.BookTypeId);
        bookInCart = false;
    }
}
