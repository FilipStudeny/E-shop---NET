@page "/product/{id:int}"
@using Eshop.Client.Services.CartService
@using Eshop.Shared.Models.Cart
@using Eshop.Shared.Models.ProductModels
@inject IProductService ProductService
@inject ICartService CartService

@if (_product == null)
{
    <h2>@_message</h2>
}
else
{
    <article class="media">
        <header class="media-img-wrapper mr-2">
            <img class="media-img" src="@_product.Image" alt="@_product.Title"/>
        </header>
        <div class="media-body">
            <div class="mt-1 mb-1">
                <h2 class="mb-1">@_product.Title</h2>
                <p>@_product.Description</p>
            </div>
            @if (_product.Variants != null && _product.Variants.Count > 0)
            {
                <div class="mb-3">
                    <select class="form-select" @bind="_currentProductVariantId">
                        @foreach (var variant in _product.Variants)
                        {
                            <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedProductVariant() != null)
            {
                @if (GetSelectedProductVariant().OriginalPrice > GetSelectedProductVariant().Price)
                {
                    <h6 class="text-muted original-price">$@GetSelectedProductVariant().OriginalPrice</h6>
                }
                
                <h4 class="price">$@GetSelectedProductVariant().Price</h4>
            }
            <button class="btn btn-primary" @onclick="AddItemToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;Add to cart
            </button>
        </div>
    </article>
}

@code {

    private Product? _product;
    private string _message = string.Empty;
    private int _currentProductVariantId = 1;

    [Parameter] public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _message = "Loading product ...";
        var response = await ProductService.GetProduct(Id);
        if (!response.Success)
        {
            _message = response.Message;
        }
        else
        {
            _product = response.Data;
            if (_product.Variants.Count > 0)
            {
                _currentProductVariantId = _product.Variants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedProductVariant()
    {
        var variant = _product.Variants.FirstOrDefault(p => p.ProductTypeId == _currentProductVariantId);
        return variant;
    }

    private async Task AddItemToCart()
    {
        var productVariant = GetSelectedProductVariant();
        var cartItem = new CartItem
        {
            ProductId = productVariant.ProductId,
            ProductTypeId = productVariant.ProductTypeId
        };

        await CartService.AddToCart(cartItem);
    }
    
}