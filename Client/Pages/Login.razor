@page "/Login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthenticationService AuthenticationService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>E-Shop | Login</PageTitle>
<h3>Login</h3>

<EditForm Model="_user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <div>
            <label for="email">Email</label>
            <InputText class="form-control" id="email" @bind-Value="_user.Email"/>
            <ValidationMessage For="@(() => _user.Email)"/>
        </div>
        <div>
            <label for="password">Password</label>
            <InputText class="form-control" id="password" @bind-Value="_user.Password" type="password"/>
            <ValidationMessage For="@(() => _user.Password)"/>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
    <div class="@_messageCss">
        <p>@_message</p>
    </div>
</EditForm>

@code {
    private readonly UserLogin _user = new();
    string? _message = string.Empty;
    string _messageCss = string.Empty;

    string? _returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var url = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(url.Query).TryGetValue("returnUrl", out var returnUrl))
        {
            _returnUrl = returnUrl;
        }
    }


    private async Task HandleLogin()
    {
        var response = await AuthenticationService.Login(_user);
        _message = response?.Message;
        if (response is { Success: false })
        {
            _messageCss = "text-danger";
        }
        else
        {
            _messageCss = "text-success";
            await LocalStorage.SetItemAsync("token", response?.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(_returnUrl);
        }
    }
}