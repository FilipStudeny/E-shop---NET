@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject ICartService CartService

<MudMenu Class="p-3" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Style="max-width: 150px">
    <ActivatorContent>
        <MudChip Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Dashboard</MudChip>
    </ActivatorContent>
    <ChildContent>
        <Authorized>
            <MudMenuItem Href="/profile">Profile</MudMenuItem>
            <MudMenuItem Href="/orders"> Profile</MudMenuItem>
            <hr/>
            <MudButton Variant="Variant.Text" OnClick="@Logout">Sign out</MudButton>
        </Authorized>
        <NotAuthorized>
            <MudMenuItem Href=@("login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)")>Login</MudMenuItem>
            <MudMenuItem Href="/register">Register</MudMenuItem>
        </NotAuthorized>
    </ChildContent>
</MudMenu>


@*
<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle user-button" @onclick="ToggleMenu" @onfocusout="HideMenu">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                <a href="/profile" class="dropdown-item">Profile</a>
                <a href="/orders" class="dropdown-item">Orders</a>
                <hr/>
                <AdminMenu/>
                <hr/>
                <button class="dropdown-item" @onclick="Logout">Logout</button>
            </Authorized>
            <NotAuthorized>
                <a href="/register" class="dropdown-item">Register</a>
                <a href="/login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Login</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>
*@


@code {
    private bool _showMenu = false;
    private string? UserMenuCssClass => _showMenu ? "show-menu" : null;

    private void ToggleMenu()
    {
        _showMenu = !_showMenu;
    }

    private async Task HideMenu()
    {
        await Task.Delay(200);
        _showMenu = false;
    }

    private async Task Logout()
    {
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        await LocalStorage.RemoveItemAsync("token");
        await CartService.GetCartItemCount();
        NavigationManager.NavigateTo("/");
    }
}