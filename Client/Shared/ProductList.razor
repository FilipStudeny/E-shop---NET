@inject IProductService ProductService
@implements IDisposable

<h3>Product List</h3>
@if (ProductService.Products.Count == 0)
{
    <h2>@ProductService.Message</h2>
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.Image" alt="@product.Title"/>
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">@GetPrice(product)</h5>
                </div>
            </li>
        }
    </ul>

    for (int i = 1; i <= ProductService.PageCount; i++)
    {
        <a href="/search/@ProductService.LastSearch/@i"
           class="btn @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info") page-selection">
            @i
        </a>
    }

}


@code {

    private string GetPrice(Product product)
    {
        var productVariants = product.Variants;
        if (productVariants.Count == 0)
        {
            return string.Empty;
        }
        
        if (productVariants.Count == 1)
        {
            return $"{productVariants[0].Price}";
        }

        decimal minPrince = productVariants.Min(v => v.Price);
        return $"Starting at ${minPrince}";

    }

    protected override void OnInitialized()
    {
        // Notifys some stuff about change, rerenders page with products selected by category
        ProductService.ChangeProducts += StateHasChanged;
    }
    
    public void Dispose()
    {
        //Unusbscribe to events
        ProductService.ChangeProducts -= StateHasChanged;
    }

}