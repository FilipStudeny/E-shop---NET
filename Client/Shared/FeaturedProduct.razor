@inject IProductService ProductService
@implements IDisposable

<div class="section-header">
    <h2 class="text-center">Featured products</h2>
</div>
@if (ProductService.Products.Count == 0)
{
    <div class="text-center">
        <h2>@ProductService.Message</h2>
    </div>
}
else
{
    <div class="container">
        @foreach (var product in ProductService.Products.Where(product => product.FeaturedProduct))
        {
            <article class="featured-product">
                <header>
                    <a href="product/@product.Id">
                        @if (!string.IsNullOrEmpty(product.Image))
                        {
                            <img class="media-img" src="@product.Image" alt="@product.Title"/>
                        }
                        else if(product.Images.Count > 0)
                        {
                            <img class="media-img" src="@product.Images[0].Data" alt="@product.Title"/>
                        } 
                    </a>
                </header>
                <div class="featured-product-details">
                    <a href="product/@product.Id">@product.Title</a>
                    @if (product.Variants.Count > 0)
                    {
                        <p class="price">$@product.Variants[0].Price</p>
                    }
                </div>
            </article>
        }
    </div>
}

@code {

    protected override void OnInitialized()
    {
        ProductService.ChangeProducts += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ChangeProducts -= StateHasChanged;
    }

}