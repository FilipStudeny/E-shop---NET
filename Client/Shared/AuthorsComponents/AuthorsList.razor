@inject IAuthorsService AuthorService
@inject NavigationManager NavigationManager
@implements IDisposable

<MudText Typo="Typo.h4">Authors</MudText>
<MudDivider DividerType="DividerType.FullWidth" Class="my-2" Style="border-color:#212121; border-width: 2px;" />

@if (AuthorService.Authors.Count == 0)
{
	<MudContainer Class="d-flex flex-row justify-content-evenly align-items-center">
		<MudText Typo="Typo.h2" Class="mb-2">@AuthorService.Message</MudText>
			<MudProgressCircular Color="Color.Info" Indeterminate="true" />
		</MudContainer>
}
else
{
	<MudStack Row="true" Justify="Justify.Center" Style="flex-wrap: wrap;">
		@foreach (var author in AuthorService.Authors)
		{
			<MudCard Elevation="4" Class="cursor-pointer hover-border" onclick="@(() => NavigationManager.NavigateTo($"/authors/author/{author.Url}"))">
				<MudCardHeader>
					<MudImage ObjectFit="ObjectFit.Contain" Src="@(author.Image)" Width="300" Height="300" />
				</MudCardHeader>
				<MudCardContent>
					<MudLink Typo="Typo.h6" Href="@($"/authors/author/{author.Url}")">@author.Name</MudLink>
				</MudCardContent>
			</MudCard>
		}
	</MudStack>
}

<style>
	.hover-border:hover{
		box-shadow: 0 0 10px grey;
	}
</style>

@code {

	protected override void OnInitialized()
	{
		AuthorService.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		AuthorService.OnChange -= StateHasChanged;
	}

}
