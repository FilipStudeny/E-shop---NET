@inject NavigationManager NavigationManager
@inject IProductService ProductService

@*
<MudAutocomplete T="string" Label="Search for books" @bind-Value="_search" SearchFunc="@Search" Variant="Variant.Filled" ProgressIndicatorColor="Color.Default">
    <ProgressIndicatorInPopoverTemplate>
        <MudList Clickable="false">
            <MudListItem>
                Loading...
            </MudListItem>
        </MudList>
    </ProgressIndicatorInPopoverTemplate>
</MudAutocomplete>
*@



<div class="input-group">
    <input @bind-value="_search" @bind-value:event="oninput" type="search" list="products" @onkeyup="HandleSearch"
           class="form-control" placeholder="Search for product ..." @ref="_searchInput"/>
    <datalist id="products">
        @foreach (var suggestion in _suggestions)
        {
            <option>@suggestion</option>
        }
    </datalist>
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="SearchForProducts"><span class="oi oi-magnifying-glass"></span></button>
    </div>
</div>

@code {
    private string _search = string.Empty;
    private List<string> _suggestions;
    protected ElementReference _searchInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _searchInput.FocusAsync();
        }
    }
    
    private void SearchForProducts()
    {
        NavigationManager.NavigateTo($"/search/{_search}/1");
    }



    
    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key is null or "Enter")
        {
            SearchForProducts();
        }else if (_search.Length > 1)
        {
            _suggestions = await ProductService.GetProductSearchSuggestions(_search);
        }
    }

}