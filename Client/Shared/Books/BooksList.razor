@inject IBookService BookService
@implements IDisposable

<MudText Typo="Typo.h4">Books</MudText>
<MudDivider DividerType="DividerType.FullWidth" Style="border-color:#212121; border-width: 2px;" />

@if (BookService.Books.Count == 0)
{
	<MudContainer Class="d-flex flex-row justify-content-evenly align-items-center">
		<MudText Typo="Typo.h2" Class="mb-2">@BookService.Message</MudText>
		<MudProgressCircular Color="Color.Info" Indeterminate="true" />
	</MudContainer>
}
else
{
	<MudGrid Spacing="5" Justify="Justify.Center" Class="my-5">

        @foreach (var book in BookService.Books)
        {
			<MudItem xs="2" Class="mud-elevation-4 m-2" Style="display: flex; flex-direction: column; justify-content: space-between; align-items: center ;width: 250px; max-width: 250px; max-height: 400px;">
				<MudImage ObjectFit="ObjectFit.Contain" Src="@book.Image" Alt="@book.Title" Width="200" Height="200" Class="mb-2"/>
				<MudStack>
					<MudLink Typo="Typo.h6" Href="@($"/books/book/{book.Id}")">@book.Title</MudLink>
					<MudLink Typo="Typo.subtitle1" Href="@($"/authors/author/{book.AuthorUrl}")">@book.AuthorName</MudLink>
				</MudStack>
				<MudStack Row="true" Justify="Justify.FlexEnd">
					<MudText Typo="Typo.h5" Color="Color.Success">@book.Price</MudText>
				</MudStack>
		   </MudItem>
                        
        }
	</MudGrid>

}


@code {

	protected override void OnInitialized()
	{
		BookService.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		BookService.OnChange -= StateHasChanged;
	}

}
