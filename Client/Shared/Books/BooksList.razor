@inject IBookService BookService
@implements IDisposable

<MudText Typo="Typo.h4">Books</MudText>
<MudDivider DividerType="DividerType.FullWidth" Class="my-2" Style="border-color:#212121; border-width: 2px;" />

@if (BookService.Books.Count == 0)
{
	<MudContainer Class="d-flex flex-row justify-content-evenly align-items-center">
		<MudText Typo="Typo.h2" Class="mb-2">@BookService.Message</MudText>
		<MudProgressCircular Color="Color.Info" Indeterminate="true" />
	</MudContainer>
}
else
{
	<MudStack Row="true" Justify="Justify.Center" Style="flex-wrap: wrap;">
		@foreach (var book in BookService.Books)
		{
			<MudPaper MaxWidth="100" Height="auto" Width="100" Class="p-0 d-flex flex-column" Style="max-width: 200px;">
				@if (book.Images != null && book.Images.Any())
				{
					<MudImage ObjectFit="ObjectFit.Contain" Src="@book.Images[0].Data" Width="200" Height="200" />
				}
				else
				{
					<MudImage ObjectFit="ObjectFit.Contain" Src="@book.DefaultImageUrl" Width="200" Height="200" />
				}
				<MudDivider DividerType="DividerType.Middle" Class="mt-1 mb-1" Style="border-color:#212121; border-width: 2px;" />
				<MudStack Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Class="px-1 m-0" Style="height: 100%;">
					<MudLink Typo="Typo.h6" Style="word-wrap: break-word;" Href="@($"/books/book/{book.Id}")">@book.Title</MudLink>
					<MudLink Typo="Typo.subtitle2" Style="word-wrap: break-word;" Href="@($"/authors/author/{book?.Author?.Url}")">@book?.Author?.Name</MudLink>
				</MudStack>
					<MudDivider DividerType="DividerType.FullWidth" Class="my-2" Style="border-color:#212121; border-width: 1px;" />
					<MudText Typo="Typo.subtitle1" Color="Color.Success" Align="Align.Right" Class="mx-2"><b>$@GetBookPrice(book)</b></MudText>
			</MudPaper>
		}
	</MudStack>
}



@code {

	private string GetBookPrice(Book book)
	{
		var bookVariants = book.Variants;
		if(bookVariants.Count == 0)
		{
			return "0.00";
		}
		
		return $"{bookVariants[0].Price}";
	}

	protected override void OnInitialized()
	{
		BookService.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		BookService.OnChange -= StateHasChanged;
	}

}
