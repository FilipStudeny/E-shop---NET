@inject IBookService BookService
@implements IDisposable

<div class="section-header">
    <h2 class="text-center">Featured products</h2>
</div>
@if (BookService.FeaturedBooks.Count == 0)
{
    <div class="text-center">
        <h2>@BookService.Message</h2>
    </div>
}
else
{
    <MudContainer Class="d-flex flex-row justify-content-evenly" >
        @foreach (var product in BookService.FeaturedBooks)
        {
            <MudPaper Height="auto" Width="200" Class="m-1">
                <MudImage ObjectFit="ObjectFit.Contain" Src="@product.DefaultImage" Alt="@product.Title" Width="200" Height="200"/>
                <MudCardContent Style="max-width: 300px;">
                    <MudLink Typo="Typo.h5" Href="@($"book/{product.Id}")">@product.Title</MudLink>
                    <MudText Typo="Typo.h6">@product.Author?.Name</MudText>
                    <MudText Typo="Typo.h6">@product.ShortDescription</MudText>
                    @if (product.Variants.Count > 0)
                    {
                        <MudText>@product.Variants[0].Price</MudText>      
                    }
                </MudCardContent>
            </MudPaper>
            
        }
    </MudContainer>
}
@code {
    
    
    protected override void OnInitialized()
    {
        BookService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        BookService.OnChange -= StateHasChanged;
    }

}