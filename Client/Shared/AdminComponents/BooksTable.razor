@inject IBookService BookService

<MudTable RowsPerPage="10" CurrentPage="0" ServerData="@(new Func<TableState, Task<TableData<BookDTO>>>(LoadData))" @ref="table">
	<HeaderContent>
		<MudTh>Id</MudTh>
		<MudTh>Image</MudTh>
		<MudTh>Title</MudTh>
		<MudTh>Author</MudTh>
		<MudTh>Actions</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Id">@context.Id</MudTd>
		<MudTd DataLabel="Image"><MudImage ObjectFit="ObjectFit.Contain" Alt="@context.Title" Width="100" Height="100" Src="@context.Image" /></MudTd>
		<MudTd DataLabel="Title"><MudLink Typo="Typo.h6" Href="@($"/books/book/{context.Id}")">@context.Title</MudLink></MudTd>
		<MudTd DataLabel="Author"><MudLink Typo="Typo.subtitle2" Href="@($"/authors/author/{context.AuthorUrl}")">@context.AuthorName</MudLink></MudTd>
		<MudTd DataLabel="Actions"><MudButton Variant="Variant.Outlined" Href="@($"/admin/edit/book/{context.Id}")" Color="Color.Primary">Edit book</MudButton></MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager HideRowsPerPage="true"/>
	</PagerContent>
</MudTable>

	@code {
	private IEnumerable<BookDTO>? pagedData;
	private MudTable<BookDTO>? table;
	private int totalItems;

	private async Task<TableData<BookDTO>> LoadData(TableState state)
	{
		var page = state.Page + 1;
		await BookService.GetBooks(page, true);

		pagedData = BookService.Books;
		totalItems = BookService.BookCount;

		return new TableData<BookDTO>()
		{
			TotalItems = totalItems,
			Items = pagedData
		};
	}
    
}
